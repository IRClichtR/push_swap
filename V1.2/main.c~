/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ftuernal <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/09 21:42:49 by ftuernal          #+#    #+#             */
/*   Updated: 2023/03/09 22:20:43 by ftuernal         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static int	check_av1(char	*av1)
{
	int	i;

	i = 0;
	while (av1[i])
	{
		if (ft_isdigit((int)av1[i] == 0 && av1[i] != ' ')
			return (-1);
		i++;
	}
	return (1);
}

static void	set_1av_a(t_pile *a, char* av)
{
	char	**args;
	int		i;

	args = ft_split(av, ' ');
	if (args == NULL)
		return ;
	a->size = 1;
	while (args[a->size] != NULL)
		a->size++;
	a->pile[0] = ft_calloc(args_size, sizeof(int));
	if (a->pile[0] == NULL)
		return ;
	while (args[i] != NULL)
	{
		a-pile[0][i] = ft_atoi(args[i]);
		i++;
	}	
}

static void	set_a(t_pile *a, char ** av, int ac)
{
	int	i;

	a->size = ac - 1;
	a->pile[0] = ft_calloc(a->size, sizeof(int));
	if (!a->pile[0])
		return ;
	i = 0;
	while (av[i] != NULL)
	{
		a->pile[0][i] = av[i];
		i++;
	}
}

static int	set_pile(t_pile *a, t_pile *b, int ac, char **av)
{
	a->pile = ft_calloc(1, sizeof(int *));
	b->pile = ft_calloc(1, sizeof(int *));
	if (!a->pile || !b->pile)
		return (-1) ;
	if (ac < 3 && av[1] != NULL)
	{
		if (check_av1 == 0)
			return (-1);
		set_1av_a(a, av[2]);
	}
	else
		set_a(a, av + 1, ac);
	b->pile[0] = ft_calloc(a->size, sizeof(int));
	if (!b->pile[0])
		return (-1);
	return (1);
}

static void	free_all(t_pile *a, t_pile *b)
{
	free(a->pile[0]);
	free(b->pile[0]);
	free(a->pile);
	free(b->pile);
	free(pile_a);
	free(pile_b);
}

int			main(int ac, char **av)
{
	t_pile	*a;
	t_pile	*b;
	int		success;

	a = ft_calloc(1, sizeof(t_pile));
	b = ft_calloc(1, sizeof(t_pile));
	if (!a || !b)
		return (0);
	int	set_pile(a, b, av, ac);
	if (check_pile(a) == 1)
		push_swap(pile_a, pile_b);
	free_all(a, b);
	return (0);
}













//Debug
void	check_alloc(t_pile *a, t_pile *b, char **av)
{
int i = 0;
	printf("DEBUG ALLOCATION\nSIZE_A == %d SIZE_B == %d\n", a->size, b->size);
	ft_printf("A  B\n");
	ft_printf("_  _\n");
	while (i < a->size)
	{
		ft_printf("%d  %d\n", a->pile[0][i], b->pile[0][i]);
		i++;
	}
	ft_printf("_**_ \n\n");
}

void	check_pushswap(t_pile *a, t_pile *b, int ac)
{
	int j = 0;

	ft_printf("A  B\n_  _\n");
	while (j < ac - 1)
	{
		ft_printf("%d  %d\n", a->pile[0][j], b->pile[0][j]);
		j++;
	}
	ft_printf("_**_ \n\n");
	ft_printf("---- \n DEBUG PUSH_SWAP \n RES = %s\n");
}
//end of debug//
